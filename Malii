#include <ArduinoJson.h>
#include <HTTPClient.h>
#include <WiFi.h>

const char* ssid = "YOUR SSID";
const char* password =  "YOUR PASSWORD";
const char* host = "LINE BOT SERVER"; //change this to your linebot server ex.http://numpapick-linebot.herokuapp.com/bot.php
#define APPID   " "     //change this to your APPID
#define KEY     " "     //change this to your KEY
#define SECRET  " "     //change this to your SECRET

#define ALIAS   "NodeMCU1" //set name of drvice
#define TargetWeb "switch" //set target name of web

#include "MicroGear.h"
WiFiClient client;
String uid = "";
int timer = 0;
MicroGear microgear(client);

void onMsghandler(char *topic, uint8_t* msg, unsigned int msglen) { // 
    Serial.print("Incoming message -->");
    msg[msglen] = '\0';
    String ms = "";
    int len = msglen-1;
   while(len > -1){
      ms = (char)msg[len] + ms;
      len--;
    }
Serial.println(ms);
    if(ms.equals("Off All") || ms.equals("OFF ALL") || ms.equals("off all") || ms.equals("0 all")|| ms.equals("Off all")
    || ms.equals("ปิดไฟทั้งหมด")|| ms.equals("เช้าแล้ว")|| ms.equals("ปิดไฟให้หน่อย")){
        digitalWrite(13, LOW);
        digitalWrite(12, LOW);// LED off
        microgear.chat(TargetWeb,'0');
        //send_data("ESP_LED_OFF");
        send_json("ESP LED OFF");
    }else if(ms.equals("On All") || ms.equals("ON ALL") || ms.equals("on all") || ms.equals("1 all")|| ms.equals("On all")
    || ms.equals("เปิดไฟทั้งหมด")|| ms.equals("มืดแล้ว")|| ms.equals("เปิดไฟให้หน่อย")){
        digitalWrite(13, HIGH);  // LED on
        digitalWrite(12, HIGH);
      microgear.chat(TargetWeb,'1');
      //send_data("ESP_LED_ON");
      send_json("ESP LED ON");
    }else if(ms.equals("Off Green") || ms.equals("OFF GREEN") || ms.equals("off green") || ms.equals("0 green")|| ms.equals("Off green")
    || ms.equals("ปิดไฟเขียว")){
        digitalWrite(12, LOW) ;// LED off
        microgear.chat(TargetWeb,'0');
        //send_data("ESP_LED_OFF");
        send_json("ESP LED OFF");
    }else if(ms.equals("On Green") || ms.equals("ON GREEN") || ms.equals("on green") || ms.equals("1 green")|| ms.equals("On green")
    || ms.equals("เปิดไฟเขียว")){
        digitalWrite(12, HIGH);  // LED on
      microgear.chat(TargetWeb,'1');
      //send_data("ESP_LED_ON");
      send_json("ESP LED ON");
    }else if(ms.equals("Off Red") || ms.equals("OFF RED") || ms.equals("off red") || ms.equals("0 red")|| ms.equals("Off red")
    || ms.equals("ปิดไฟแดง")){
        digitalWrite(13, LOW);// LED off
        microgear.chat(TargetWeb,'0');
        //send_data("ESP_LED_OFF");
        send_json("ESP LED OFF");
    }else if(ms.equals("On Red") || ms.equals("ON RED") || ms.equals("on red") || ms.equals("1 red")
    || ms.equals("เปิดไฟแดง")){
        digitalWrite(13, HIGH);  // LED on
      microgear.chat(TargetWeb,'1');
      //send_data("ESP_LED_ON");
      send_json("ESP LED ON");
    }
}

void onConnected(char *attribute, uint8_t* msg, unsigned int msglen) {
    Serial.println("Connected to NETPIE...");
    microgear.setName(ALIAS);
}


void setup() {
    microgear.on(MESSAGE,onMsghandler);
    microgear.on(CONNECTED,onConnected);

    Serial.begin(115200);
    
    pinMode(13, OUTPUT);
    pinMode(12, OUTPUT);
    if (WiFi.begin(ssid, password)) {
        while (WiFi.status() != WL_CONNECTED) {
            delay(100);
            Serial.print(".");
        }
    }

Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    microgear.init(KEY,SECRET,ALIAS);
    microgear.connect(APPID);
     //digitalWrite(13, HIGH);   // LED on
}
#define ARDUINOJSON_VERSION "5.13.2"
void send_json(String data){
    StaticJsonBuffer<300> JSONbuffer;   //Declaring static JSON buffer
    JsonObject& JSONencoder = JSONbuffer.createObject(); 
 
    JSONencoder["ESP"] = data;
 
    JsonArray& values = JSONencoder.createNestedArray("values"); //JSON array
    values.add(20); //Add value to array
    values.add(21); //Add value to array
    values.add(23); //Add value to array
 
 
    char JSONmessageBuffer[300];
    JSONencoder.prettyPrintTo(JSONmessageBuffer, sizeof(JSONmessageBuffer));
    Serial.println(JSONmessageBuffer);
 
    HTTPClient http;    //Declare object of class HTTPClient
 
    http.begin(host);      //Specify request destination
    http.addHeader("Content-Type", "application/json");  //Specify content-type header
 
    int httpCode = http.POST(JSONmessageBuffer);   //Send the request
    String payload = http.getString();                                        //Get the response payload
 
    Serial.println(httpCode);   //Print HTTP return code
    Serial.println(payload);    //Print request response payload
    
    http.end();  //Close connection
}
void loop() {
    if (microgear.connected()) {
        Serial.println("..."); 
        microgear.loop();
        timer = 0;
    }
    else {
        Serial.println("connection lost, reconnect...");
        if (timer >= 5000) {
            microgear.connect(APPID); 
            timer = 0;
        }
        else timer += 100;
    }
    delay(100);
}
